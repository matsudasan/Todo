{"version":3,"sources":["App.js","Actions.js","Reducers.js","serviceWorker.js","index.js"],"names":["App","props","inputtext","React","createRef","submit","bind","e","preventDefault","this","ADDTODO","current","value","todolist","todo","todos","map","key","id","className","onClick","REMOVETODO","onSubmit","tyoe","ref","type","Component","connect","state","Todo","dispatch","text","addtodo","index","removetodo","initialState","reducers","combineReducers","action","newtodo","findIndex","int","splice","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAMMA,G,wDACF,WAAYC,GAAO,IAAD,8BACf,cAAMA,IACDC,UAAUC,IAAMC,YACrB,EAAKC,OAAO,EAAKA,OAAOC,KAAZ,gBAHG,E,mDAMXC,GACHA,EAAEC,iBACFC,KAAKR,MAAMS,QAAQD,KAAKP,UAAUS,QAAQC,OAC1CH,KAAKP,UAAUS,QAAQC,MAAM,K,+BAIxB,IAAD,OACEC,EAASJ,KAAKR,MAAMa,KAAKC,MAAMC,KAAI,SAACF,GAC1C,OAAO,wBAAIG,IAAKH,EAAKI,IAAKJ,EAAKA,KACtB,uBAAGK,UAAU,mBAAmBC,QAAS,kBAAI,EAAKnB,MAAMoB,WAAWP,EAAKI,WAEnF,OACI,6BACI,0BAAMI,SAAUb,KAAKJ,QACjB,+BACI,wEACA,2BAAOkB,KAAK,OAAOC,IAAKf,KAAKP,aAEjC,4BAAQuB,KAAK,UAAb,iBAEJ,4BACKZ,Q,GA7BDV,IAAMuB,YAgDTC,eAXS,SAACC,GACvB,MAAO,CAACd,KAAKc,EAAMC,SAGM,SAACC,GAAD,MACvB,CACIpB,QAAQ,SAACqB,GAAD,OAAQD,EC5CT,SAACC,GACZ,MAAM,CAACN,KALI,UAKUM,QD2CQC,CAAQD,KACjCV,WAAW,SAACY,GAAD,OAASH,ECzCX,SAACZ,GACd,MAAM,CAACO,KARO,aAQUP,MDwCSgB,CAAWD,QAIjCN,CAA4C3B,G,cElDrDmC,EAAe,CAACpB,MAAM,IAExBG,EAAG,EAqBQkB,EADCC,YAAgB,CAACR,KAlBpB,WAAiC,IAAhCD,EAA+B,uDAAzBO,EAAcG,EAAW,uCACzC,OAAQA,EAAOb,MACb,IDTS,UCUP,sBAAUG,EAAV,CAAgBb,MAAM,GAAD,mBAAKa,EAAMb,OAAX,CAAiB,CAACD,KAAKwB,EAAOP,KAAKb,GAAGA,SAE7D,IDXY,aCYV,IAAMqB,EAAQ,YAAIX,EAAMb,OAClBkB,EAAML,EAAMb,MAAMyB,WAAU,SAAAC,GAAG,OAAEA,EAAIvB,KAAKoB,EAAOpB,MAIvD,OAHGe,GAAO,GACRM,EAAQG,OAAOT,EAAM,GAEvB,eAAUL,EAAV,CAAgBb,MAAMwB,IAExB,QACI,OAAOX,MCVGe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAOC,EAAQC,YAAYb,GAE3Bc,IACAC,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70d972a5.chunk.js","sourcesContent":["//App.js\r\nimport React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport {addtodo,removetodo} from './Actions';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n       super(props);\r\n       this.inputtext=React.createRef();\r\n       this.submit=this.submit.bind(this);\r\n    }\r\n\r\n    submit(e){\r\n        e.preventDefault();\r\n        this.props.ADDTODO(this.inputtext.current.value);\r\n        this.inputtext.current.value=\"\";\r\n\r\n    }\r\n\r\n    render(){\r\n        const todolist=this.props.todo.todos.map((todo)=>{\r\n        return(<li key={todo.id}>{todo.todo}\r\n                 <i className=\"fas fa-trash-alt\" onClick={()=>this.props.REMOVETODO(todo.id)}></i>\r\n               </li>)})\r\n      return(\r\n          <div>\r\n              <form onSubmit={this.submit}>\r\n                  <label>\r\n                      <p>>新しいTodoを追加</p>\r\n                      <input tyoe='text' ref={this.inputtext}/>\r\n                  </label>\r\n                  <button type='submit'>追加</button>\r\n              </form>\r\n              <ul>\r\n                  {todolist}\r\n              </ul>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {todo:state.Todo}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>(\r\n    {\r\n        ADDTODO:(text)=>dispatch(addtodo(text)),\r\n        REMOVETODO:(index)=>dispatch(removetodo(index))\r\n    }\r\n)\r\n  \r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","\r\nconst ADD_TODO=\"ADDTODO\";\r\nconst REMOVE_TODO=\"REMOVETODO\";\r\n\r\n\r\nconst addtodo =(text)=>{\r\n    return{type:ADD_TODO,text};//text:textを省略\r\n};\r\n\r\nconst removetodo=(id)=>{\r\n    return{type:REMOVE_TODO,id}\r\n}\r\n\r\nexport {addtodo,removetodo};\r\nexport {ADD_TODO,REMOVE_TODO};","//Reducres.js\r\nimport { combineReducers } from \"redux\";\r\nimport {ADD_TODO,REMOVE_TODO} from './Actions';\r\n\r\nconst initialState = {todos:[]};\r\n\r\nlet id=0;\r\n//Reducer\r\nconst Todo = (state=initialState, action) => {\r\n    switch (action.type) {\r\n      case ADD_TODO:\r\n        return{...state,todos:[...state.todos,{todo:action.text,id:id++}]}\r\n\r\n      case REMOVE_TODO:\r\n        const newtodo=[...state.todos];\r\n        const index=state.todos.findIndex(int=>int.id===action.id);\r\n        if(index>-1){\r\n          newtodo.splice(index,1)\r\n        }\r\n        return{...state,todos:newtodo}\r\n\r\n      default:\r\n          return state;\r\n    }\r\n  };\r\n\r\nconst  reducers=combineReducers({Todo});\r\nexport default reducers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//index.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux'; \r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport reducers from './Reducers';\r\nimport * as serviceWorker from './serviceWorker';\r\n \r\nconst  store = createStore(reducers);\r\n \r\nReactDOM.\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();"],"sourceRoot":""}